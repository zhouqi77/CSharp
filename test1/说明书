
       
实验一说明书

1、找出两个字符串的最长公共子序列。

2、运用动态规划算法解LCS问题。
动态规划应用于有最优子结构的问题。
最优子结构：局部最优解能决定全局最优解。（简单地说，问题能够分解成子问题来解决。）

动态规划算法分以下4个步骤：
A，描述最优解的结构；
B，递归定义最优解的值；
C，按自底向上的方式计算最优解的值；
D，由计算出的结果构造一个最优解。 

注：动态规划算法解LCS问题，它不要求所求的字符在所给的字符串是连续的。

3、动态规划算法算法的流程。

例如：

字符串一：Xi=<x1,x2,...,xi>，   (1<=i<=m)
 
字符串二：Yj=<y1,y2,...,yj>,      (1<=j<=n)
  
在X、Y字符串中找出最长公共子序列。
  
假设Z=（z1,z2，…，zk）属于Lcs（X,Y），Zk的长度为k
  
因为X、Y序列是假设出来的，我们并不知道其中具体的字符是什么，所以我们要简化问题，
  
我们可以先把问题转化为求Zk的长度问题。

  1）若xm=yn（最后一个字符相同）用反证法可以证明，

Zk(最长公共子序列)的最后一个字符zk=xm=yn，因为Zk∈LCS(X,Y) , 所以Zk-1∈LCS（Xm-1,Yn-1),

Z的前缀Zk-1是Xi-1序列和Yj-1序列的最长公共子序列。所以Zk的长度等于LCS（Xi-1,Yj-1）的长度加1

  2）若xm≠yn:用反证法可以证明，Zk要么Z∈LCS(Xm-1, Y)，要么Zk∈LCS(X , Yn-1)。

由于zk≠xm与zk≠yn其中至少有一个必成立，若zk≠xm则有Z∈LCS(Xm-1 , Y)，以此类推

如果zk≠yn 则有Z∈LCS(X , Yn-1)。所以问题变成了求LCS(Xm-1 , Y)和 LCS(X , Yn-1)的长度。

在这两种情况下，选择长度最长的序列，既max{LCS(Xm-1 , Y)的长度, LCS(X , Yn-1)的长度}。


4.数组单元格：
  
  填写过程中记录下当前单元格的数字来自于哪个单元格，以方便最后回溯找出最长公共子串。有时候左上、左、上三者中有多个

  同时达到最大，那么任取其中之一，但是在整个过程中你必须遵循固定的优先标准。代码中优先级别是左上>上>左。
  
 （两数不同，箭头朝向取最大；两数相同，斜上角加一。）

  

   
   
